#!/usr/bin/env python
# coding: utf-8

# In[2]:


# Team member           ID
# Jufeng Yang           20125011
# Xingda Zhou           19107471
# Zhongen Qin           19107579

# import numpy and imutils
# From Speed sign detector import speed_sign_detector and load_images_from_folder
import numpy as np
import imutils
from Speed_sign_detector import speed_sign_detector
from Speed_sign_detector import load_images_from_folder


# In[3]:


# Load images from memory
speed_imgaes = load_images_from_folder('./speed-sign-test-images/')
# Convert list into array 
speed_images = np.array(speed_imgaes)

# Create a zero descript vector for assignment later 
descript_vector = np.zeros((48,4097))

# Create index variable to show how many images detected
index = 0

# Use for loop to go through all images
for i in range(0, speed_images.shape[0]):
    # Detect speed signs from a image, return a speed sign image
    speed_signs, _, _, _, _ = speed_sign_detector(speed_images[i,:,:,:])
    # Convert speed_sign 
    speed_signs = np.array(speed_signs)
    
    # Use for loop to go through all labels(RoI) in a image
    for j in range(0,speed_signs.shape[0]):
        # Check the shape of speed sign
        print(speed_signs.shape)
        
        # Flatten all image grid data into a 1-D data
        signs_array_flatten = speed_signs[j,:,:].flatten()
        # assign all picture descript vector to a array
        descript_vector[index, 1:4097] = signs_array_flatten
        # Incease index for descript vector
        index = index+1
        print("----------------------------------------------------")
        # Use to check the number of images and RoIs
        print("%d : %d"%(i+1,j+1))
        # Show the sign images.
        imutils.imshow(speed_signs[j,:,:])
        #print(descript_vector)
        
        # Print the index
        print("First %d row"%index)
        print(descript_vector[index-1,:])
        
# Check one row of descript vector
print(descript_vector[40,:])


# In[3]:


# Confirm all labels of pictures
# 100 replace by 0.1, 120 replace by 0.12, 80 replace by 0.08, 60 replace by 0.06, 50 replace by 0.05, 40 replace by 0.04
# Non speed sign replace by -1
labels = [0.1, 0.1, 0.1, 0.1, 0.1, 0.12, 0.12, 0.12, 0.12, -1, 
          -1, 0.12, -1, -1, 0.12, -1, -1, -1, 0.04, -1, 
          0.04, -1, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.06, 0.06, 
          0.06, 0.06, 0.06, 0.06, 0.08, -1, -1, -1, -1, -1, 
          0.08, 0.08, 0.08, 0.08, 0.08, 0.08, -1, -1]
# Assign all labels to descript vectors
descript_vector[0:48,0] =  np.array(labels)

# Check one row of descript vector
print(descript_vector[6,:])

np.resize(descript_vector, (48,4097))
print(descript_vector.shape)
#np.save('descript_vector', descript_vector)


# In[4]:


# Load all pictures from memory
test_images = load_images_from_folder('./speed-sign-test-images/')

# load descript vector
descript_vectors = np.load('descript_vector.npy')
# Convert all image data into array
test_images = np.array(test_images)

# Variable to store index and distance value
all_distance = np.zeros((descript_vectors.shape[0], 2))

# Call the sign detector method to return the signs.
test_signs, _, _, _, _ = speed_sign_detector(test_images[8,:,:,:])
# Convert all signs into array
test_signs = np.array(test_signs)

# Define a variable to count number of signs
signs_count = 0
# Use a for loop to go through all RoI
for j in range(0,test_signs.shape[0]):
    
    # Flatten the image data in to 1-D
    test_signs_array_flatten = test_signs[j,:,:].flatten()
    # Use for loop to calculate distances with each row
    for ind in range(0,48):
        # Substraction operation for the teat value and descript vector
        substraction = np.subtract(test_signs_array_flatten, descript_vectors[ind,1:4097])
        # sqrt and times operation to calcualte the distance
        distance = np.sqrt((np.dot(substraction, substraction)))
        # Assign all distance value and index to a array
        all_distance[ind,:] = np.array([ind, distance])
        # Use the argmin to return the index of minmum distance
        speed_number_index = np.argmin(all_distance[:,1])
        #print(speed_number_index)
        
    # if the returned value is not -1, which means the label is a speed sign
    if descript_vectors[speed_number_index,0] != -1:
        #print(descript_vectors[speed_number_index,0])
        # sign count to record number of speed signs
        signs_count = signs_count + 1
        # Return the speed sign value from descript vector corresponding to the index
        returned_label = descript_vectors[speed_number_index,0]
        # Print the details of speed sign
        print("sign %d: %d km/h"%(j, (returned_label*1000)))
# Print the total number of speed signs            
print("There is(are) %d speed sign(s)"%(signs_count))

#print(speed_number_index)
#print(all_distance)
#speed_number_index = np.where(all_distance == np.min(all_distance))
#speed_number_index = np.argmin(all_distance)
#print(speed_number_index)
#print(descript_vectors[speed_number_index,0])
#print("In this image, have %d ")


# In[11]:


# Just copy the code before and create a method
def speed_sign_classifer(test_images):
    
    # load descript vector
    descript_vectors = np.load('descript_vector.npy')
    # Convert all image data into array
    test_images = np.array(test_images)

    # Variable to store index and distance value
    all_distance = np.zeros((descript_vectors.shape[0], 2))

    # Call the sign detector method to return the signs imagesand the position of images.
    test_signs, Xmax, Xmin, Ymax, Ymin = speed_sign_detector(test_images)
    # Convert all data to array
    test_signs = np.array(test_signs)

    # Define a variable to count number of signs
    signs_count = 0
    # Define 4 variables and use it store the position of speed signs
    Xmax_sign = np.array([])
    Xmin_sign = np.array([])
    Ymax_sign = np.array([])
    Ymin_sign = np.array([])
    
    # Use a for loop to go through all RoI
    for j in range(0,test_signs.shape[0]):
        # Flatten the image data in to 1-D
        test_signs_array_flatten = test_signs[j,:,:].flatten()
        # Use for loop to calculate distances with each row
        for ind in range(0,48):
            # Substraction operation for the teat value and descript vector
            substraction = np.subtract(test_signs_array_flatten, descript_vectors[ind,1:4097])
            # sqrt and times operation to calcualte the distance
            distance = np.sqrt((np.dot(substraction, substraction)))
            # Assign all distance value and index to a array
            all_distance[ind,:] = np.array([ind, distance])
            # Use the argmin to return the index of minmum distance
            speed_number_index = np.argmin(all_distance[:,1])
            #print(speed_number_index)
         
        # if the returned value is not -1, which means the label is a speed sign
        if descript_vectors[speed_number_index,0] != -1:
            # sign count to record number of speed signs
            signs_count = signs_count + 1
            #print(descript_vectors[speed_number_index,0])
            
            # Select the position info from all ROI positions
            Xmax_sign = np.append(Xmax_sign, Xmax[j])
            Xmin_sign = np.append(Xmin_sign, Xmin[j])
            Ymax_sign = np.append(Ymax_sign, Ymax[j])
            Ymin_sign = np.append(Ymin_sign, Ymin[j])
            
            # Return the speed sign value from descript vector corresponding to the index
            returned_label = descript_vectors[speed_number_index,0]
            # Use the label * 1000 to generate the speed value
            returned_label = returned_label*1000
            # Output the sign info
            print("sign %d, %d km/h"%(signs_count, returned_label))
    # Print the total sign number       
    print("There is(are) %d speed sign(s)"%(signs_count))
    return returned_label, Xmax_sign, Xmin_sign, Ymax_sign, Ymin_sign


# In[13]:


# Call the function to check output
test_images = load_images_from_folder('./speed-sign-test-images/')
test_images = np.array(test_images)
a,Xmax_sign,_,_,_ = speed_sign_classifer(test_images[8,:,:,:])
print(Xmax_sign)


# In[ ]:




